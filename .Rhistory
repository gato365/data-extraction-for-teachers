knitr::opts_chunk$set(echo = TRUE)
library(rvest)
library(httr)
library(dplyr)
library(purrr)
## Createtion of URL
team_name <- "was"
year <- 2023
generic_url <- paste0("https://www.pro-football-reference.com/teams/",team_name,"/",year,".htm#all_games")
## Special Note 1: Maybe Optional (Further Research is needed on its relevance)
# request_details <- "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
# response <- GET(url, user_agent(request_details),timeout(20))
webpage <- generic_url %>%
rvest::read_html()
web_table <- webpage %>%
rvest::html_table() %>%
purrr::pluck(2) %>%
setNames(make.unique(ifelse(names(.) == "", "col", names(.))))
first_row <- web_table %>%
dplyr::slice(1)
mod_1_web_table <- web_table %>%
setNames(
purrr::map2_chr(
names(web_table),
first_row,
~if(startsWith(.x, "col")){.y} else {.x}
)
)
mod_2_web_table <- mod_1_web_table %>%
rename(
"Time" = 4,
"Boxoffice" = 5,
"Game Outcome" = 6,
"Game Location" = 9
)
mod_3_web_table <- mod_2_web_table |>
setNames(
purrr::map2_chr(
names(mod_2_web_table),
first_row,
~{
col_index <- match(.x, names(mod_2_web_table))
# For columns 11 onwards, combine names without creating duplicates
if(!is.na(col_index) && col_index >= 11) {
orig_name <- stringr::str_remove_all(.x, "[0-9_]") # Remove existing numbers/underscores
new_value <- stringr::str_remove_all(.y, "[0-9_]") # Clean the value too
paste(orig_name, new_value, sep = "_")
} else {
.x
}
}
)
)  |>
# dplyr::slice(-1) |>
janitor::clean_names()
colnames(mod_3_web_table)
mod_4_web_table <- mod_3_web_table %>%
mutate(
# Convert numeric columns
across(c(week, score_tm, score_opp,
starts_with("offense_"),
starts_with("defense_"),
starts_with("expected_points_")),
as.numeric))
webpage <- generic_url %>%
rvest::read_html()
web_table <- webpage %>%
rvest::html_table() %>%
purrr::pluck(2) %>%
setNames(make.unique(ifelse(names(.) == "", "col", names(.))))
knitr::opts_chunk$set(echo = TRUE)
library(rvest)
library(httr)
library(dplyr)
library(purrr)
## Createtion of URL
team_name <- "was"
year <- 2023
generic_url <- paste0("https://www.pro-football-reference.com/teams/",team_name,"/",year,".htm#all_games")
webpage <- generic_url %>%
rvest::read_html()
web_table <- webpage %>%
rvest::html_table() %>%
purrr::pluck(2) %>%
setNames(make.unique(ifelse(names(.) == "", "col", names(.))))
first_row <- web_table %>%
dplyr::slice(1)
mod_1_web_table <- web_table %>%
setNames(
purrr::map2_chr(
names(web_table),
first_row,
~if(startsWith(.x, "col")){.y} else {.x}
)
)
mod_2_web_table <- mod_1_web_table %>%
rename(
"Time" = 4,
"Boxoffice" = 5,
"Game Outcome" = 6,
"Game Location" = 9
)
mod_3_web_table <- mod_2_web_table |>
setNames(
purrr::map2_chr(
names(mod_2_web_table),
first_row,
~{
col_index <- match(.x, names(mod_2_web_table))
# For columns 11 onwards, combine names without creating duplicates
if(!is.na(col_index) && col_index >= 11) {
orig_name <- stringr::str_remove_all(.x, "[0-9_]") # Remove existing numbers/underscores
new_value <- stringr::str_remove_all(.y, "[0-9_]") # Clean the value too
paste(orig_name, new_value, sep = "_")
} else {
.x
}
}
)
)  |>
# dplyr::slice(-1) |>
janitor::clean_names()
View(mod_3_web_table)
mod_3_web_table <- mod_2_web_table |>
setNames(
purrr::map2_chr(
names(mod_2_web_table),
first_row,
~{
col_index <- match(.x, names(mod_2_web_table))
# For columns 11 onwards, combine names without creating duplicates
if(!is.na(col_index) && col_index >= 11) {
orig_name <- stringr::str_remove_all(.x, "[0-9_]") # Remove existing numbers/underscores
new_value <- stringr::str_remove_all(.y, "[0-9_]") # Clean the value too
paste(orig_name, new_value, sep = "_")
} else {
.x
}
}
)
)  |>
dplyr::slice(-1) |>
janitor::clean_names()
??dplyr
??slice
mod_3_web_table <- mod_2_web_table |>
setNames(
purrr::map2_chr(
names(mod_2_web_table),
first_row,
~{
col_index <- match(.x, names(mod_2_web_table))
# For columns 11 onwards, combine names without creating duplicates
if(!is.na(col_index) && col_index >= 11) {
orig_name <- stringr::str_remove_all(.x, "[0-9_]") # Remove existing numbers/underscores
new_value <- stringr::str_remove_all(.y, "[0-9_]") # Clean the value too
paste(orig_name, new_value, sep = "_")
} else {
.x
}
}
)
)  |>
dplyr::slice_head() |>
janitor::clean_names()
View(mod_2_web_table)
View(mod_3_web_table)
View(mod_3_web_table)
print(mod_3_web_table)
str(mod_3_web_table)
head(mod_3_web_table)
mod_3_web_table <- mod_2_web_table |>
setNames(
janitor::make_clean_names(
purrr::map2_chr(
names(mod_2_web_table),
first_row,
~{
col_index <- match(.x, names(mod_2_web_table))
if(!is.na(col_index) && col_index >= 11) {
orig_name <- stringr::str_remove_all(.x, "[0-9_]")
new_value <- stringr::str_remove_all(.y, "[0-9_]")
paste(orig_name, new_value, sep = "_")
} else {
.x
}
}
)
)
) |>
dplyr::slice_head()
View(mod_3_web_table)
mod_3_web_table <- mod_2_web_table |>
setNames(
janitor::make_clean_names(
purrr::map2_chr(
names(mod_2_web_table),
first_row,
~{
col_index <- match(.x, names(mod_2_web_table))
if(!is.na(col_index) && col_index >= 11) {
orig_name <- stringr::str_remove_all(.x, "[0-9_]")
new_value <- stringr::str_remove_all(.y, "[0-9_]")
paste(orig_name, new_value, sep = "_")
} else {
.x
}
}
)
)
) |>
dplyr::slice(-1)
View(mod_3_web_table)
colnames(mod_3_web_table)
mod_4_web_table <- mod_3_web_table %>%
mutate(
# Convert numeric columns
across(c(week, score_tm, score_opp,
starts_with("offense_"),
starts_with("defense_"),
starts_with("expected_points_")),
as.numeric))
mod_4_web_table <- mod_3_web_table %>%
mutate(
# Convert numeric columns
across(c(week, score_2, score_opp,
starts_with("offense_"),
starts_with("defense_"),
starts_with("expected_points_")),
as.numeric))
mod_3_web_table <- mod_2_web_table |>
setNames(
make.names(
purrr::map2_chr(
names(mod_2_web_table),
first_row,
~{
col_index <- match(.x, names(mod_2_web_table))
if(!is.na(col_index) && col_index >= 11) {
orig_name <- stringr::str_remove_all(.x, "[0-9_]")
new_value <- stringr::str_remove_all(.y, "[0-9_]")
paste(orig_name, new_value, sep = "_")
} else {
.x
}
}
),
unique = TRUE
)
) |>
dplyr::slice_head() |>
janitor::clean_names()
mod_3_web_table <- mod_2_web_table |>
setNames(
make.names(
purrr::map2_chr(
names(mod_2_web_table),
first_row,
~{
col_index <- match(.x, names(mod_2_web_table))
if(!is.na(col_index) && col_index >= 11) {
orig_name <- stringr::str_remove_all(.x, "[0-9_]")
new_value <- stringr::str_remove_all(.y, "[0-9_]")
paste(orig_name, new_value, sep = "_")
} else {
.x
}
}
),
unique = TRUE
)
) |>
dplyr::slice(-1) |>
janitor::clean_names()
View(mod_3_web_table)
mod_2_web_table <- mod_1_web_table %>%
# rename(
"Time" = 4,
mod_2_web_table <- mod_1_web_table %>%
# rename(
#   "Time" = 4,
#  "Boxoffice" = 5,
#   "Game Outcome" = 6,
# "Game Location" = 9
#  )
mod_2_web_table <- mod_1_web_table #%>%
# rename(
#   "Time" = 4,
#  "Boxoffice" = 5,
#   "Game Outcome" = 6,
# "Game Location" = 9
#  )
View(mod_2_web_table)
mod_3_web_table <- mod_2_web_table |>
setNames(
purrr::map2_chr(
names(mod_2_web_table),
first_row,
~{
col_index <- match(.x, names(mod_2_web_table))
# For columns 11 onwards, combine names without creating duplicates
if(!is.na(col_index) && col_index >= 11) {
orig_name <- stringr::str_remove_all(.x, "[0-9_]") # Remove existing numbers/underscores
new_value <- stringr::str_remove_all(.y, "[0-9_]") # Clean the value too
paste(orig_name, new_value, sep = "_")
} else {
.x
}
}
)
)  |>
dplyr::slice_head() |>
janitor::clean_names()
mod_3_web_table <- mod_2_web_table |>
setNames(
janitor::make_clean_names(
purrr::map2_chr(
names(mod_2_web_table),
first_row,
~{
col_index <- match(.x, names(mod_2_web_table))
if(!is.na(col_index) && col_index >= 11) {
orig_name <- stringr::str_remove_all(.x, "[0-9_]")
new_value <- stringr::str_remove_all(.y, "[0-9_]")
paste(orig_name, new_value, sep = "_")
} else {
.x
}
}
)
)
) |>
dplyr::slice(-1)
colnames(mod_3_web_table)
mod_2_web_table <- mod_1_web_table %>%
rename(
"Time" = 4,
#  "Boxoffice" = 5,
"Game Outcome" = 8,
"Game Location" = 6
)
mod_3_web_table <- mod_2_web_table |>
setNames(
janitor::make_clean_names(
purrr::map2_chr(
names(mod_2_web_table),
first_row,
~{
col_index <- match(.x, names(mod_2_web_table))
if(!is.na(col_index) && col_index >= 11) {
orig_name <- stringr::str_remove_all(.x, "[0-9_]")
new_value <- stringr::str_remove_all(.y, "[0-9_]")
paste(orig_name, new_value, sep = "_")
} else {
.x
}
}
)
)
) |>
dplyr::slice(-1)
colnames(mod_3_web_table)
mod_4_web_table <- mod_3_web_table %>%
mutate(
# Convert numeric columns
across(c(week, score_tm, score_opp,
starts_with("offense_"),
starts_with("defense_"),
starts_with("expected_points_")),
as.numeric))
mod_4_web_table <- mod_3_web_table %>%
mutate(
# Convert numeric columns
across(c(week, score_1, score_2, #changed from tm, opp
starts_with("offense_"),
starts_with("defense_"),
starts_with("expected_points_")),
as.numeric))
mod_5_web_table <- mod_4_web_table  %>%
mutate(
game_outcome = as.factor(game_outcome),
game_location = case_when(
game_location == "@" ~ "away",
game_location == "" ~ "home",
TRUE ~ game_location
) %>%
as.factor()
) %>%
filter(day != "")
View(mod_5_web_table)
mod_4_web_table <- mod_3_web_table %>%
mutate(
# Convert numeric columns
across(c(week, score_1, score_2, #changed from tm, opp
starts_with("offense_"),
starts_with("defense_"),
starts_with("expected_points_")),
as.numeric))
View(mod_5_web_table)
??setNames
??names
knitr::opts_chunk$set(echo = TRUE)
first_row <- web_table %>%
dplyr::slice(1)
knitr::opts_chunk$set(echo = TRUE)
library(rvest)
library(httr)
library(dplyr)
library(purrr)
## Createtion of URL
team_name <- "was"
year <- 2023
generic_url <- paste0("https://www.pro-football-reference.com/teams/",team_name,"/",year,".htm#all_games")
## Special Note 1: Maybe Optional (Further Research is needed on its relevance)
# request_details <- "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
# response <- GET(url, user_agent(request_details),timeout(20))
webpage <- generic_url %>%
rvest::read_html()
web_tables <- webpage %>%
rvest::html_table()
int_web_table <- web_tables %>%
purrr::pluck(2)
web_table <- int_web_table %>%
stats::setNames(make.unique(if_else(names(.) == "", "col", names(.))))
first_row <- web_table %>%
dplyr::slice(1)
View(first_row)
??map2_chr
View(mod_1_web_table)
mod_1_web_table <- web_table %>%
setNames(
purrr::map2_chr(
names(web_table),
first_row,
~if(startsWith(.x, "col")){.y} else {.x}
)
)
View(web_table)
View(mod_1_web_table)
View(mod_1_web_table)
web_table <- int_web_table %>%
rename_with(~ make.unique(if_else(. == "", "col", .)))
View(int_web_table)
web_table <- int_web_table %>%
stats::setNames(make.unique(if_else(names(.) == "", "col", names(.))))
View(web_table)
??set_names
