---
title: "Weather Data  - OpenWeatherAPI"
author: "Ciera Millard"
date: "`r Sys.Date()`"
output: html_document
---

# Session 2: Using OpenWeatherAPI

Overview of different offering from OpenWeather

\[Image of API Call\]

\[Add places for questions, comments, discussions\]

\[Use string glue instead, investigate\]

\[use \_lst, \_df\]

| Feature | **Geocoding API** | **Current Weather API** | **One Call API** |
|-----------------|-----------------|-----------------|--------------------|
| **Purpose** | Convert city names to coordinates | Get current weather for a city or location | Get full weather data for a coordinate |
| **Input** | City name or zip code | City name, city ID, coordinates, or zip | Latitude & Longitude |
| **Output** | Location info (lat/lon, country, etc.) | Temperature, conditions, wind, etc. | Current, hourly, daily, alerts (optionally filtered) |
| **Coordinates needed?** | No | No | Yes |
| **Units supported** | N/A | standard, metric, imperial | standard, metric, imperial |
| **Endpoint URL** | `/geo/1.0/direct` | `/data/2.5/weather` | `/data/3.0/onecall` |
| **Use case** | Finding lat/lon of cities | Lightweight current conditions | Complete weather view |

## Load Libraries

\[What Each Library Is use for\]

```{r}
#| output: false
library(httr2)
library(tibble)
library(jsonlite)
library(httr)
library(lubridate) ## Time and date handling
library(ggplot2)
library(dplyr)
library(dotenv)
```

## Load API Key from Environment

Using dotenv::load_dot_env() we will load our .Renviron.txt that contains our API Key. Using Sys.getenv("API_KEY") we can supply our API Key whenever needed.

```{r}
#| results: hide
dotenv::load_dot_env(file = ".Renviron.txt")
Sys.getenv("API_KEY")
```

# Get Current Weather for a Given City

## Step 1: Select a City

```{r}
city_name <- "San Luis Obispo"
```

## Step 2: Create API Request URL

Using paste0() to attach the base URL, the city name, the API Key, and units together and assign it to "current_weather_url"

\[Actual URL vs Query format, learn more about URL HTML format\]

```{r}
current_weather_url <- paste0("https://api.openweathermap.org/data/2.5/weather?",
                              "q=", URLencode(city_name),
                              "&appid=", Sys.getenv("API_KEY"),
                              "&units=", "imperial")
#Other Method
#current_query <- list(q = city_name, appid = api_key, units = "imperial")
```

## Step 3: Call API

Using httr::GET() to call the OpenWeather API and assign the response to a variable. We then use httr:http_type() to see what our result looks like.

```{r}
response <- GET(current_weather_url)

http_type(response)
```

## Step 4: Parse Response

Using logic, if the status code is 200 (meaning OK, successful) we use httr::content to interpret our response. The resulting data is in the JSON form, which appears as a named list sometimes containing other lists within in it, these being "nested."

We then pass it into jsonlite::fromJSON to convert our JSON into a list, specifically nested lists. Using flatten = TRUE unnests the lists in the response.

as.data.frame() converts this list into a data.frame object, and then we print the data frame.

If the status code is not 200, we print a message stating that the process has failed.

```{r}
if (status_code(response) == 200) {
  # Parse and flatten JSON
  content_json <- content(response, as = "text", encoding = "UTF-8")
  parsed <- fromJSON(content_json, flatten = TRUE)
  
  # Convert to data frame directly
  currweather <- as.data.frame(parsed)
  
  print(currweather)
} else {
  cat("Failed. Status code:", status_code(response), "\n")
}
```

\[Pipe, select only a couple variables\]

# Geocoding API

The Geocode API from OpenWeather retrieves the latitude and longitude for a given city.

## Function: Geocode

```{r}
# Step 1: Define function "geocode" that accepts the parameter "city"

geocode <- function(city){
  
# Step 2: Create API request URL
  
  geo_url <- paste0(
  "http://api.openweathermap.org/geo/1.0/direct?",
  "q=", URLencode(city),
  "&limit=1&appid=", Sys.getenv("API_KEY")
)
 # Step 3: Use GET to call the API with the URL request 
  
geo_response <- GET(geo_url)

 # Step 4: If the status code is 200 (OK), use fromJSON() and content() to parse and convert our response data and assign to a variable.

if (status_code(geo_response) == 200) {
  geo_data <- fromJSON(content(geo_response, as = "text", encoding = "UTF-8"), flatten = TRUE)
  
  
# Step 5: Assess if the output has 0 length, meaning no result. If so, stop and display an error message.  
  
  if (length(geo_data) == 0) {
    stop("City not found. Please check the city name.")
  }
  
# Step 6: Assign latitude and longitude to variables, and use round() to clip it down to 2 decimal places.
  
  lat <- round(geo_data$lat, digits = 2)
  lon <- round(geo_data$lon, digits = 2)
  
# Step 7: Print a string displaying the city name and latitude / longitude.  
  
  return(cat("Coordinates for", city, "-> Latitude:", lat, "Longitude:", lon, "\n"))
   }
}
```

## Test Geocode Function

```{r}
geocode("Ames, IA, USA")
```

# Obtain Past 5 Days Weather Given City

```{r}
# Step 1: Use Geocoding API to get lattitude and longitude
# Step 1a: Construct URL query using city name and API key
geo_url <- paste0(
  "http://api.openweathermap.org/geo/1.0/direct?",
  "q=", URLencode(city_name),
  "&limit=1&appid=", Sys.getenv("API_KEY")
)
```

```{r}
# Step 1b: Define 'numdays' variable to the amount of days back to include weather data 
# Ex: numdays = 5 will retrieve the past 5 days of weather
numdays <- 5
```

```{r}
# Step 1c: 
# Use GET to call the API and assign it to a variable geo_response. 

geo_response <- GET(geo_url)
# Step 1d:
# Use logic (if) to proceed #if the status code is 200, and use fromJSON package jsonlite to  get content from our API an #use 'flatten = TRUE' to unnest the data.
if (status_code(geo_response) == 200) {
  geo_data <- fromJSON(content(geo_response, as = "text", encoding = "UTF-8"), flatten = TRUE)
  
  
# Step 1e: Assess if the output has 0 length, meaning no result. If so, stop and display an error message.  
  if (length(geo_data) == 0) {
    stop("City not found. Please check the city name.")
  }
  
# Step 1f: Assign latitude and longitude to variables, and use round() to clip it down to 2 decimal places.
  
  lat <- round(geo_data$lat, digits = 2)
  lon <- round(geo_data$lon, digits = 2)
  
# Optional: Print a string displaying the city name and latitude / longitude.  
  cat("Coordinates for", city_name, "-> Latitude:", lat, "Longitude:", lon, "\n")
  
  
# Step 2: Use the One Call API to get the past 5 days of weather data  
  
# Step 2a: Define the date range using variable 'numdays'

  date_range <- as.character(lubridate::today() - days(1:numdays))
  
# Step 2b: Initialize data frame to hold the outputs. "hist_weather" for historical weather data.
  hist_weather <- data.frame()
  
# Step 2c: Loop over dates and make an API call for each day. For every date in the date vector, supply latitude, longitude, the different date, API key, and provide unit preference.
  for (date in date_range) {
    
    weather_url <- paste0(
      "https://api.openweathermap.org/data/3.0/onecall/day_summary?",
      "lat=", lat,
      "&lon=", lon,
      "&date=", date,
      "&appid=", Sys.getenv("API_KEY"),
      "&units=imperial"
    )
    
# Step 2d: Make the API call using the different weather_url queries for each date. Store these in weather_response.    
    
    weather_response <- GET(weather_url)
    
# Step 2e: Use logic to evaluate the response and use fromJSON() to get the content from the JSON output and use "flatten = TRUE" to unnest the data.
    
    if (status_code(weather_response) == 200) {
      weather_parsed <- jsonlite::fromJSON(content(weather_response, as = "text", encoding = "UTF-8"), flatten = TRUE)
      
# Step 2f: Use the output for each day and assign it into a data frame.
      daily_df <- as.data.frame(weather_parsed)
      
# Step 2g: Add date and city name columns [USE MUTATE] * mutate(city = city_name)
      daily_df$city <- city_name
      daily_df$date <- date
      
# Step 2h: Use bind_rows to add all the rows to the hist_weather data frame.
      hist_weather <- bind_rows(hist_weather, daily_df)
      
    } else {
# Step 2i: Use logic (else) to print an error message for when weather data is not obtained.
      warning(paste("Failed to get weather for", date, "-", status_code(weather_response)))
    }
  }
  
  print(hist_weather)
  
} else {
  stop("Geocoding failed. Check your API key or city name.")
}

```

| JSON Key              | R Type    | Notes                      |
|-----------------------|-----------|----------------------------|
| `temperature.min`     | numeric   | Minimum temp for the day   |
| `temperature.max`     | numeric   | Maximum temp for the day   |
| `humidity.morning`    | integer   | Morning humidity %         |
| `wind.max`            | numeric   | Peak wind speed            |
| `precipitation.total` | numeric   | Rain/snow total (mm or in) |
| `date` (added)        | Date      | From loop date             |
| `city` (added)        | character | City name from geocoding   |

The API returns a JSON object representing summary statistics for a specific location and date. The root of the JSON is a named listc(this becomes a named list or a single-row data.frame after fromJSON()).

temperature → Nested List → Becomes nested data.frame or named columns

```         
min: numeric (e.g., 50.1) → Low temp

max: numeric (e.g., 75.6) → High temp

afternoon, morning, evening, night: numeric
```

These become temperature.min, temperature.max, etc. if you use flatten = TRUE with jsonlite::fromJSON().

humidity → Similar structure as temperature

```         
Each time-of-day (morning, evening...) → integer (%) → becomes humidity.morning, humidity.evening, etc.
```

wind → List of stats

```         
max: numeric → max wind speed

direction: numeric (degrees from North)
```

In R: wind.max, wind.direction

These all flatten into column names like precipitation.total, dew_point.afternoon.

| temperature.min | temperature.max | humidity.morning | wind.max | wind.direction | precipitation.total | date | city |
|---------|---------|---------|---------|---------|---------|---------|---------|
| 50.1 | 75.6 | 80 | 12.3 | 270 | 0.5 | 2025-04-23 | San Luis Obispo |

## Function: Previous Weather

```{r}
prev_weather <- function(city, numdays){

# Step 1: Use Geocoding API to get lattitude and longitude
# Step 1a: Construct URL query using city name and API key
geo_url <- paste0(
  "http://api.openweathermap.org/geo/1.0/direct?",
  "q=", URLencode(city_name),
  "&limit=1&appid=", Sys.getenv("API_KEY")
)
# Step 1c: 
# Use GET to call the API and assign it to a variable geo_response. 

geo_response <- GET(geo_url)
# Step 1d:
# Use logic (if) to proceed #if the status code is 200, and use fromJSON package jsonlite to  get content from our API an #use 'flatten = TRUE' to unnest the data.
if (status_code(geo_response) == 200) {
  geo_data <- fromJSON(content(geo_response, as = "text", encoding = "UTF-8"), flatten = TRUE)
  
  
# Step 1e: Assess if the output has 0 length, meaning no result. If so, stop and display an error message.  
  if (length(geo_data) == 0) {
    stop("City not found. Please check the city name.")
  }
  
# Step 1f: Assign latitude and longitude to variables, and use round() to clip it down to 2 decimal places.
  
  lat <- round(geo_data$lat, digits = 2)
  lon <- round(geo_data$lon, digits = 2)
  
# Optional: Print a string displaying the city name and latitude / longitude.  
  cat("Coordinates for", city, "-> Latitude:", lat, "Longitude:", lon, "\n")
  
  
# Step 2: Use the One Call API to get the past 5 days of weather data  
  
# Step 2a: Define the date range using variable 'numdays'

  date_range <- as.character(lubridate::today() - days(1:numdays))
  
# Step 2b: Initialize data frame to hold the outputs. "hist_weather" for historical weather data.
  hist_weather <- data.frame()
  
# Step 2c: Loop over dates and make an API call for each day. For every date in the date vector, supply latitude, longitude, the different date, API key, and provide unit preference.
  for (date in date_range) {
    
    weather_url <- paste0(
      "https://api.openweathermap.org/data/3.0/onecall/day_summary?",
      "lat=", lat,
      "&lon=", lon,
      "&date=", date,
      "&appid=", Sys.getenv("API_KEY"),
      "&units=imperial"
    )
    
# Step 2d: Make the API call using the different weather_url queries for each date. Store these in weather_response.    
    
    weather_response <- GET(weather_url)
    
# Step 2e: Use logic to evaluate the response and use fromJSON() to get the content from the JSON output and use "flatten = TRUE" to unnest the data.
    
    if (status_code(weather_response) == 200) {
      weather_parsed <- jsonlite::fromJSON(content(weather_response, as = "text", encoding = "UTF-8"), flatten = TRUE)
      
# Step 2f: Use the output for each day and assign it into a data frame.
      daily_df <- as.data.frame(weather_parsed)
      
# Step 2g: Add date and city name columns ## USE MUTATE
      daily_df$city <- city
      daily_df$date <- date
      
# Step 2h: Use bind_rows to add all the rows to the hist_weather data frame.
      hist_weather <- bind_rows(hist_weather, daily_df)
      
    } else {
# Step 2i: Use logic (else) to print an error message for when weather data is not obtained.
      warning(paste("Failed to get weather for", date, "-", status_code(weather_response)))
    }
  }
  
  return(hist_weather)
  
} else {
  stop("Geocoding failed. Check your API key or city name.")
}
}
```

```{r}
prev_weather("San Luis Obispo", 4)
```

# Create Visualizations

```{r}
#| message: false
df4 <- prev_weather("Ames, IA, USA", 4) |>  mutate(date = as.Date(date))

ggplot(df4, aes(x = date)) +
  geom_line(aes(y = temperature.max, color = "High"), linewidth = 1.2) +
  geom_line(aes(y = temperature.min, color = "Low"), linewidth = 1.2) +
  scale_color_manual(values = c("High" = "red", "Low" = "blue")) +
  labs(
    title = paste("High and Low Temperatures in", unique(df4$city)),
    x = "Date",
    y = "Temperature (°F)",
    color = "Temperature Type"
  ) +
  theme_minimal(base_size = 14)
```

```{r}
#| output: false
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
```

```{r}
#sf_map <- function(cities)
cities <- c("San Luis Obispo", "Santa Barbara", "San Francisco")

# Function to get coordinates + weather summary
get_city_weather <- function(city, date = Sys.Date()) {
  geo_url <- paste0(
    "http://api.openweathermap.org/geo/1.0/direct?",
    "q=", URLencode(city),
    "&limit=1&appid=", Sys.getenv("API_KEY")
  )
  
  geo_response <- GET(geo_url)
  
  if (status_code(geo_response) == 200) {
    geo_data <- fromJSON(content(geo_response, as = "text", encoding = "UTF-8"), flatten = TRUE)
    
    if (length(geo_data) == 0) return(NULL)
    
    lat <- geo_data$lat
    lon <- geo_data$lon
    
    weather_url <- paste0(
      "https://api.openweathermap.org/data/3.0/onecall/day_summary?",
      "lat=", lat,
      "&lon=", lon,
      "&date=", format(date, "%Y-%m-%d"),
      "&appid=", Sys.getenv("API_KEY"),
      "&units=imperial"
    )
    
    weather_response <- GET(weather_url)
    
    if (status_code(weather_response) == 200) {
      weather_data <- fromJSON(content(weather_response, as = "text", encoding = "UTF-8"), flatten = TRUE)
      
      tibble(
        city = city,
        date = date,
        lat = lat,
        lon = lon,
        temp_max = weather_data$temperature$max,
        temp_min = weather_data$temperature$min
      )
    } else return(NULL)
  } else return(NULL)
}

# Fetch for all cities
weather_df <- bind_rows(lapply(cities, get_city_weather))

```

```{r}
weather_sf <- weather_df %>%
  st_as_sf(coords = c("lon", "lat"), crs = 4326)
```

```{r}
ca <- ne_states(country = "United States of America", returnclass = "sf") %>%
  filter(name == "California")

ggplot() +
  geom_sf(data = ca, fill = "gray95", color = "gray60") +
  geom_sf(data = weather_sf, aes(color = temp_max), size = 6) +
  geom_sf_label(data = weather_sf, aes(label = city), nudge_y = 0.5, size = 2.5) +
  scale_color_viridis_c(option = "plasma", name = "High Temp (°F)") +
  labs(
    title = "California City Temperatures",
    subtitle = paste("Date:", Sys.Date())
  ) +
  theme_minimal()

```

\*\* Code with less dependencies

```{r}
#| eval: false
ggplot() +
  geom_sf(data = weather_sf, aes(color = temp_max), size = 6) +
  geom_sf_label(data = weather_sf, aes(label = city), nudge_y = 0.5, size = 4) +
  scale_color_viridis_c(option = "plasma", name = "High Temp (°F)") +
  labs(
    title = "California City Temperatures",
    subtitle = paste("Date:", Sys.Date())
  ) +
  theme_minimal()

```
