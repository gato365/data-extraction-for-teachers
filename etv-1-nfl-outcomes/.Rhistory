table <- webpage %>%
html_table() %>%
pluck(2)
library(purrr)
webpage <- read_html(generic_url)
table <- webpage %>%
html_table() %>%
pluck(2)
View(table)
print(table)
webpage <- generic_url %>%
rvest::read_html()
web_table <- webpage %>%
rvest::html_table() %>%
purrr::pluck(2)
View(web_table)
mod_1_table <- web_table %>%
janitor::row_to_names(row_number = 1) |>
janitor::clean_names()
View(mod_1_table)
mod_1_table <- web_table %>%
rename_with(
~case_when(
. == "" && which(colnames(table) == .) == 4 ~ "time",
. == "" && which(colnames(table) == .) == 5 ~ "boxoffice",
. == "" && which(colnames(table) == .) == 6 ~ "game_outcome",
. == "" && which(colnames(table) == .) == 9 ~ "game_location",
TRUE ~ .
)
) |>
# Then combine column names with first row values
setNames(
map2_chr(
names(.),
slice(., 1),
~if(.x %in% c("time", "boxoffice", "game_outcome", "game_location")) {
.x
} else {
paste(na.omit(c(.x[.x != ""], .y[.y != ""])), collapse = "-")
}
)
) |>
# Remove the first row since it's now part of column names
slice(-1)
webpage <- generic_url %>%
rvest::read_html()
web_table <- webpage %>%
rvest::html_table() %>%
purrr::pluck(2)
mod_1_table <- web_table %>%
rename_with(
~case_when(
. == "" && which(colnames(table) == .) == 4 ~ "time",
. == "" && which(colnames(table) == .) == 5 ~ "boxoffice",
. == "" && which(colnames(table) == .) == 6 ~ "game_outcome",
. == "" && which(colnames(table) == .) == 9 ~ "game_location",
TRUE ~ .
)
) |>
# Then combine column names with first row values
setNames(
map2_chr(
names(.),
slice(., 1),
~if(.x %in% c("time", "boxoffice", "game_outcome", "game_location")) {
.x
} else {
paste(na.omit(c(.x[.x != ""], .y[.y != ""])), collapse = "-")
}
)
) |>
# Remove the first row since it's now part of column names
slice(-1)
webpage <- generic_url %>%
rvest::read_html()
web_table <- webpage %>%
rvest::html_table() %>%
purrr::pluck(2)
mod_1_table <- web_table |>
rename_with(
~case_when(
. == "" && which(colnames(web_table) == .) == 4 ~ "time",
. == "" && which(colnames(web_table) == .) == 5 ~ "boxoffice",
. == "" && which(colnames(web_table) == .) == 6 ~ "game_outcome",
. == "" && which(colnames(web_table) == .) == 9 ~ "game_location",
TRUE ~ .
)
) |>
setNames(
purrr::map2_chr(
names(web_table),
dplyr::slice(web_table, 1),
~if(.x %in% c("time", "boxoffice", "game_outcome", "game_location")) {
.x
} else {
paste(na.omit(c(.x[.x != ""], .y[.y != ""])), collapse = "-")
}
)
) |>
dplyr::slice(-1)
mod_1_table <- web_table %>%
rename_with(
~case_when(
. == "" && which(colnames(web_table) == .) == 4 ~ "time",
. == "" && which(colnames(web_table) == .) == 5 ~ "boxoffice",
. == "" && which(colnames(web_table) == .) == 6 ~ "game_outcome",
. == "" && which(colnames(web_table) == .) == 9 ~ "game_location",
TRUE ~ .
)
) %>%
setNames(
purrr::map2_chr(
names(web_table),
dplyr::slice(web_table, 1),
~if(.x %in% c("time", "boxoffice", "game_outcome", "game_location")) {
.x
} else {
paste(na.omit(c(.x[.x != ""], .y[.y != ""])), collapse = "-")
}
)
) #%>%
mod_1_table <- web_table %>%
rename_with(
~case_when(
. == "" && which(colnames(web_table) == .) == 4 ~ "time",
. == "" && which(colnames(web_table) == .) == 5 ~ "boxoffice",
. == "" && which(colnames(web_table) == .) == 6 ~ "game_outcome",
. == "" && which(colnames(web_table) == .) == 9 ~ "game_location",
TRUE ~ .
)
)
colnames(web_table)
mod_1_table <- web_table |>
# First handle type 2 (columns with custom names)
rename_with(
~case_when(
. == "" && which(colnames(web_table) == .) == 4 ~ "time",
. == "" && which(colnames(web_table) == .) == 5 ~ "boxoffice",
. == "" && which(colnames(web_table) == .) == 6 ~ "game_outcome",
. == "" && which(colnames(web_table) == .) == 9 ~ "game_location",
TRUE ~ .
)
) |>
setNames(
purrr::map2_chr(
names(web_table),
dplyr::slice(web_table, 1),
~{
# Type 1: Column has name and first row has value (columns 11-25)
if (!is.na(.x) && .x != "" && !is.na(.y) && .y != "" &&
which(names(web_table) == .x) >= 11) {
paste(.x, .y, sep = "-")
}
# Type 2: Custom named columns (4-6, 9)
else if (.x %in% c("time", "boxoffice", "game_outcome", "game_location")) {
.x
}
# Type 3: Empty column name but first row has value (1-3, 7, 8, 10)
else if ((.x == "" || is.na(.x)) && !is.na(.y) && .y != "") {
.y
}
else {
.x
}
}
)
) |>
dplyr::slice(-1)
mod_1_table <- web_table |>
# First handle type 2 (columns with custom names)
rename_with(
~case_when(
. == "" && which(colnames(web_table) == .) == 4 ~ "time",
. == "" && which(colnames(web_table) == .) == 5 ~ "boxoffice",
. == "" && which(colnames(web_table) == .) == 6 ~ "game_outcome",
. == "" && which(colnames(web_table) == .) == 9 ~ "game_location",
TRUE ~ .
)
)
mod_1_table <- web_table |>
# First handle type 3 - Set initial names from first row for empty columns
setNames(
purrr::map2_chr(
names(web_table),
dplyr::slice(web_table, 1),
~if(.x == "") .y else .x
)
)
dplyr::slice(web_table, 1)
web_table <- webpage %>%
rvest::html_table() %>%
purrr::pluck(2) %>%
setNames(make.unique(ifelse(names(.) == "", "col", names(.))))
View(web_table)
webpage <- generic_url %>%
rvest::read_html()
web_table <- webpage %>%
rvest::html_table() %>%
purrr::pluck(2) %>%
setNames(make.unique(ifelse(names(.) == "", "col", names(.))))
mod_1_table <- web_table |>
# Now we can safely use slice to get first row values
mutate(row1 = dplyr::slice(., 1)) |>
# Handle type 3 - Empty columns get first row values
setNames(
purrr::map2_chr(
names(.),
dplyr::slice(., 1),
~if(startsWith(.x, "col")) .y else .x
)
)
first_row <- web_table |>
dplyr::slice(1)
first_row <- web_table |>
dplyr::slice(1)
mod_1_table <- web_table |>
# Handle type 3 - Empty columns get first row values
setNames(
purrr::map2_chr(
names(web_table),
first_row,
~if(startsWith(.x, "col")) .y else .x
)
)
View(mod_1_table)
mod_1_table <- web_table |>
# Handle type 3 - Empty columns get first row values
setNames(
purrr::map2_chr(
names(web_table),
first_row,
~if(startsWith(.x, "col")) .y else .x
)
)
mod_2_table <- mod_1_table %>%
rename_with(
~case_when(
. == "Week" && which(startsWith(names(web_table), "col")) == 4 ~ "time",
. == "Week" && which(startsWith(names(web_table), "col")) == 5 ~ "boxoffice",
. == "Week" && which(startsWith(names(web_table), "col")) == 6 ~ "game_outcome",
. == "Week" && which(startsWith(names(web_table), "col")) == 9 ~ "game_location",
TRUE ~ .
)
)
mod_2_table <- mod_1_table %>%
rename_with(
~case_when(
. == "Week" && which(startsWith(names(mod_1_table), "col")) == 4 ~ "time",
. == "Week" && which(startsWith(names(mod_1_table), "col")) == 5 ~ "boxoffice",
. == "Week" && which(startsWith(names(mod_1_table), "col")) == 6 ~ "game_outcome",
. == "Week" && which(startsWith(names(mod_1_table), "col")) == 9 ~ "game_location",
TRUE ~ .
)
)
mod_2_table <- mod_1_table |>
rename(
"time" = 4,
"boxoffice" = 5,
"game_outcome" = 6,
"game_location" = 9
)
View(mod_2_table)
mod_3_table <- mod_2_table |>
setNames(
purrr::map2_chr(
names(mod_2_table),
first_row,
~if(which(names(web_table) %in% .x) >= 11) {
paste(.x, .y, sep = "-")
} else {
.x
}
)
) |>
dplyr::slice(-1)
mod_3_table <- mod_2_table |>
setNames(
purrr::map2_chr(
names(mod_2_table),
first_row,
~{
col_index <- match(.x, names(mod_2_table))
if(!is.na(col_index) && col_index >= 11) {
paste(.x, .y, sep = "-")
} else {
.x
}
}
)
) |>
dplyr::slice(-1)
View(mod_3_table)
dplyr::slice(-1) %>%
janitor::clean_names()
mod_3_web_table <- mod_2_web_table %>%
setNames(
purrr::map2_chr(
names(mod_2_web_table),
first_row,
~{
col_index <- match(.x, names(mod_2_web_table))
if(!is.na(col_index) && col_index >= 11) {
paste(.x, .y, sep = "-")
} else {
.x
}
}
)
) %>%
dplyr::slice(-1) %>%
janitor::clean_names()
first_row <- web_table %>%
dplyr::slice(1)
mod_1_web_table <- web_table %>%
setNames(
purrr::map2_chr(
names(web_table),
first_row,
~if(startsWith(.x, "col")){.y} else {.x}
)
)
mod_2_web_table <- mod_1_web_table %>%
rename(
"Time" = 4,
"Boxoffice" = 5,
"Game Outcome" = 6,
"Game Location" = 9
)
mod_3_web_table <- mod_2_web_table %>%
setNames(
purrr::map2_chr(
names(mod_2_web_table),
first_row,
~{
col_index <- match(.x, names(mod_2_web_table))
if(!is.na(col_index) && col_index >= 11) {
paste(.x, .y, sep = "-")
} else {
.x
}
}
)
) %>%
dplyr::slice(-1) %>%
janitor::clean_names()
View(mod_3_web_table)
View(mod_1_web_table)
View(mod_2_web_table)
names(mod_2_web_table)
stringr::str_remove_all(names(mod_2_web_table), "[0-9.]")
mod_3_web_table <- mod_2_web_table %>%
setNames(
purrr::map2_chr(
names(mod_2_web_table),
first_row,
~{
col_index <- match(.x, stringr::str_remove_all(names(mod_2_web_table), "[0-9.]") )
if(!is.na(col_index) && col_index >= 11) {
paste(.x, .y, sep = "-")
} else {
.x
}
}
)
) %>%
dplyr::slice(-1) %>%
janitor::clean_names()
View(mod_3_web_table)
mod_3_web_table <- mod_2_web_table %>%
setNames(
purrr::map2_chr(
names(mod_2_web_table),
first_row,
~{
col_index <- match(.x, names(mod_2_web_table) )
if(!is.na(col_index) && col_index >= 11) {
paste(.x, .y, sep = "-")
} else {
.x
}
}
)
) %>%
dplyr::slice(-1) %>%
janitor::clean_names()
mod_3_web_table <- mod_2_web_table %>%
setNames(
purrr::map2_chr(
names(mod_2_web_table),
first_row,
~{
col_index <- match(.x, names(mod_2_web_table) )
if(!is.na(col_index) && col_index >= 11) {
paste(.x, .y, sep = "_")
} else {
.x
}
}
)
) %>%
dplyr::slice(-1)
mod_3_web_table <- mod_2_web_table %>%
setNames(
purrr::map2_chr(
names(mod_2_web_table),
first_row,
~{
col_index <- match(.x, names(mod_2_web_table) )
if(!is.na(col_index) && col_index >= 11) {
paste(.x, .y, sep = "_")
} else {
.x
}
}
)
) %>%
dplyr::slice(-1) %>%
janitor::clean_names()
mod_3_web_table <- mod_2_web_table %>%
setNames(
purrr::map2_chr(
names(mod_2_web_table),
first_row,
~{
col_index <- match(.x, names(mod_2_web_table) )
if(!is.na(col_index) && col_index >= 11) {
paste(.x, .y, sep = "_")
} else {
.x
}
}
)
) %>%
dplyr::slice(-1) %>%
janitor::clean_names()
colnames(mod_3_web_table)
mod_3_web_table <- mod_2_web_table |>
setNames(
purrr::map2_chr(
names(mod_2_web_table),
first_row,
~{
col_index <- match(.x, names(mod_2_web_table))
# For columns 11 onwards, combine names without creating duplicates
if(!is.na(col_index) && col_index >= 11) {
orig_name <- stringr::str_remove_all(.x, "[0-9_]") # Remove existing numbers/underscores
new_value <- stringr::str_remove_all(.y, "[0-9_]") # Clean the value too
paste(orig_name, new_value, sep = "_")
} else {
.x
}
}
)
) |>
dplyr::slice(-1) |>
janitor::clean_names()
colnames(mod_3_web_table)
print(mod_3_web_table)
mod_4_web_table <- mod_3_web_table %>%
mutate(
# Convert numeric columns
across(c(week, score_tm, score_opp,
starts_with("offense_"),
starts_with("defense_"),
starts_with("expected_points_")),
as.numeric))
View(mod_4_web_table)
mod_5_web_table <- mod_4_web_table  %>%
mutate(
game_outcome = as.factor(game_outcome),
game_location = case_when(
game_location == "@" ~ "away",
game_location == "" ~ "home",
TRUE ~ game_location
) %>%
as.factor()
)
View(mod_5_web_table)
mod_5_web_table <- mod_4_web_table  %>%
mutate(
game_outcome = as.factor(game_outcome),
game_location = case_when(
game_location == "@" ~ "away",
game_location == "" ~ "home",
TRUE ~ game_location
) %>%
as.factor()
) %>%
filter(is.na(day))
mod_5_web_table <- mod_4_web_table  %>%
mutate(
game_outcome = as.factor(game_outcome),
game_location = case_when(
game_location == "@" ~ "away",
game_location == "" ~ "home",
TRUE ~ game_location
) %>%
as.factor()
) %>%
filter(!is.na(day))
mod_5_web_table <- mod_4_web_table  %>%
mutate(
game_outcome = as.factor(game_outcome),
game_location = case_when(
game_location == "@" ~ "away",
game_location == "" ~ "home",
TRUE ~ game_location
) %>%
as.factor()
) %>%
filter(day != "")
View(mod_5_web_table)
